<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>rmblworx.tools</groupId>
	<artifactId>timey</artifactId>
	<version>0.1.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<organization>
		<name>rmblworx</name>
	</organization>

	<name>timey</name>
	<url>https://github.com/RMBLWorx/timey</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven-clean-plugin.version>2.5</maven-clean-plugin.version>
		<junit.version>4.11</junit.version>
		<javafx.version>8.0</javafx.version>
		<spring.version>4.0.6.RELEASE</spring.version>
		<slf4j.version>1.7.7</slf4j.version>
		<apache.commons.lang.version>2.6</apache.commons.lang.version>
		<cglib.version>3.1</cglib.version>
		<aspectjweaver.version>1.8.1</aspectjweaver.version>
		<testfx.version>3.1.2</testfx.version>
		<hibernate.core.version>3.6.10.Final</hibernate.core.version>
		<h2.version>1.3.176</h2.version>
		<commons-dbcp.version>1.4</commons-dbcp.version>
		<javafx.lib.ant-javafx.jar>${java.home}/../lib/ant-javafx.jar</javafx.lib.ant-javafx.jar>
		<mockito.version>1.9.5</mockito.version>
		<junit-toolbox.version>2.0</junit-toolbox.version>
		<application.dist>${project.build.directory}/distribution</application.dist>
		<maven.dependency.plugin.version>2.8</maven.dependency.plugin.version>
		<maven.surefire.plugin.version>2.17</maven.surefire.plugin.version>
		<timey.main.class>rmblworx.tools.timey.gui.Main</timey.main.class>
		<timey.gui-test-marker.class>org.loadui.testfx.categories.TestFX</timey.gui-test-marker.class>
	</properties>

	<dependencies>
		<!-- Dependencies fuer die Persistenz -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>${commons-dbcp.version}</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.core.version}</version>
		</dependency>
		<!-- logging per AOP dependencies -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${apache.commons.lang.version}</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib.version}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectjweaver.version}</version>
		</dependency>
		<!-- Spring-Framework -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- Testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.loadui</groupId>
			<artifactId>testFx</artifactId>
			<version>${testfx.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<scope>test</scope>
			<version>${mockito.version}</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.junit-toolbox</groupId>
			<artifactId>junit-toolbox</artifactId>
			<version>${junit-toolbox.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>all-tests</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration combine.self="override">
							<includes>
								<include>GuiFirstTests.java</include>
							</includes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<inherited>true</inherited>
					<configuration>
						<archive>
							<manifest>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
							</manifest>
						</archive>
					</configuration>
				</plugin>
				<!-- copy-dependencies in Eclipse aktivieren, http://stackoverflow.com/a/8752807 -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[1.0.0,)</versionRange>
										<goals>
											<goal>copy-dependencies</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${maven-clean-plugin.version}</version>
				<configuration>
					<excludeDefaultDirectories>true</excludeDefaultDirectories>
					<filesets>
						<fileset>
							<directory>target</directory>
							<includes>
								<include>**/*</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.0.201403182114</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
<!-- 					<execution> -->
<!-- 						<id>default-check</id> -->
<!-- 						<goals> -->
<!-- 							<goal>check</goal> -->
<!-- 						</goals> -->
<!-- 						<configuration> -->
<!-- 							minimal geforderte Testabdeckung -->
<!-- 							<rules> -->
<!-- 								<rule> -->
<!-- 									<element>CLASS</element> -->
<!-- 									<excludes> -->
<!-- 										<exclude>*Test</exclude> -->
<!-- 									</excludes> -->
<!-- 									<limits> -->
<!-- 										<limit> -->
<!-- 											<counter>LINE</counter> -->
<!-- 											<value>COVEREDRATIO</value> -->
<!-- 											<minimum>0.25</minimum> -->
<!-- 										</limit> -->
<!-- 									</limits> -->
<!-- 								</rule> -->
<!-- 							</rules> -->
<!-- 						</configuration> -->
<!-- 					</execution> -->
				</executions>
				<configuration>
					<excludes>
						<exclude>ch/nydi/aop/interceptor/**/*.class</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<!-- Maven-Abhängigkeiten in target-Ordner kopieren. Hauptsächlich um 
					dem Scene Builder Drittanbieter-Komponenten bekannt zu machen, ohne absolute 
					Pfade in FXML-Dateien verwenden zu müssen. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven.dependency.plugin.version}</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>install</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
							<outputDirectory>${application.dist}/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.plugin.version}</version>
				<configuration>
					<excludedGroups>${timey.gui-test-marker.class}</excludedGroups>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<!-- Quelle zum bauen des ausfuehrbaren und signierten Jar-Archivs (17.03.2014-21:03): 
						http://myjavafx.blogspot.de/2012/08/building-signing-and-deploying-your.html -->
					<!-- Aufrufbeispiel: mvn clean install -DskipTests=true antrun:run -Dfx=jar -->
					<execution>
						<id>default-cli</id>
						<phase>install</phase>
						<configuration>
							<target xmlns:fx="javafx:com.sun.javafx.tools.ant">
								<property name="applet.width" value="330" />
								<property name="applet.height" value="200" />
								<property name="application.title" value="${project.artifactId}" />
								<property name="application.vendor" value="${project.groupId}" />
								<!-- Copy the class path to the manifest. The lib folder is generated 
									by maven-dependency-plugin. -->
								<manifestclasspath property="manifest.classpath"
									jarfile="${application.dist}/${artefactId}.jar">
									<classpath>
										<path id="build.classpath">
											<fileset dir="${application.dist}/lib">
												<include name="*.jar" />
											</fileset>
										</path>
									</classpath>
								</manifestclasspath>

								<taskdef resource="com/sun/javafx/tools/ant/antlib.xml"
									uri="javafx:com.sun.javafx.tools.ant" classpath="${javafx.lib.ant-javafx.jar}" />
								<fx:application id="myApp" name="${project.artifactId}"
									mainClass="${timey.main.class}" />
								<fx:jar destfile="${application.dist}/${project.artifactId}.jar">
									<fx:application refid="myApp" />

									<manifest>
										<attribute name="Class-Path" value="${manifest.classpath}" />
										<attribute name="Implementation-Version" value="${project.version}" />
										<attribute name="Bundle-Version" value="${project.version}" />
									</manifest>

									<fx:platform javafx="${javafx.version}" />

									<!-- The target/classes folder which contains all resources and 
										class files -->
									<fileset dir="${project.build.outputDirectory}" />
								</fx:jar>
								<fx:resources id="appRes">
									<fx:fileset dir="${application.dist}" includes="*.jar" />
									<fx:fileset dir="${application.dist}" includes="lib/*.jar" />
								</fx:resources>
								<fx:deploy width="${applet.width}" height="${applet.height}"
									outdir="${application.dist}" embedJNLP="true" outfile="${application.title}">

									<fx:application refId="myApp" />

									<fx:resources refid="appRes" />
									<fx:info title="Sample app: ${application.title}"
										vendor="${application.vendor}" />

									<!-- Request elevated permissions -->
									<fx:permissions elevated="true" />
								</fx:deploy>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
