<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>rmblworx.tools</groupId>
	<artifactId>timey</artifactId>
	<version>0.1.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<organization>
		<name>rmblworx</name>
	</organization>

	<name>timey</name>
	<url>https://github.com/RMBLWorx/timey</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven-clean-plugin.version>2.5</maven-clean-plugin.version>
		<junit.version>4.11</junit.version>
		<javafx.version>8.0</javafx.version>
		<spring.version>4.0.6.RELEASE</spring.version>
		<slf4j.version>1.7.7</slf4j.version>
		<apache.commons.lang.version>2.6</apache.commons.lang.version>
		<cglib.version>3.1</cglib.version>
		<aspectjweaver.version>1.8.2</aspectjweaver.version>
		<testfx.version>3.1.2</testfx.version>
		<hibernate.core.version>3.6.10.Final</hibernate.core.version>
		<h2.version>1.3.176</h2.version>
		<commons-io.version>2.4</commons-io.version>
		<commons-dbcp.version>1.4</commons-dbcp.version>
		<mockito.version>1.9.5</mockito.version>
		<junit-toolbox.version>2.0</junit-toolbox.version>
		<application.dist>${project.build.directory}/distribution</application.dist>
		<maven.dependency.plugin.version>2.8</maven.dependency.plugin.version>
		<maven.surefire.plugin.version>2.17</maven.surefire.plugin.version>
		<timey.main.class>rmblworx.tools.timey.gui.Main</timey.main.class>
	</properties>

	<dependencies>
		<!-- Dependencies fuer die Persistenz -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>${commons-dbcp.version}</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.core.version}</version>
		</dependency>
		<!-- logging per AOP dependencies -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${apache.commons.lang.version}</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib.version}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectjweaver.version}</version>
		</dependency>
		<!-- Spring-Framework -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- Testing -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.loadui</groupId>
			<artifactId>testFx</artifactId>
			<version>${testfx.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.googlecode.junit-toolbox</groupId>
			<artifactId>junit-toolbox</artifactId>
			<version>${junit-toolbox.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<!--
				Ersetzt in Datei src/main/resources/app.properties alle Platzhalter durch deren Werte.
				Quelle: http://stackoverflow.com/questions/11740618/is-there-a-way-to-use-maven-property-in-java-class-during-compilation
			-->
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>app.properties</include>
				</includes>
				<filtering>true</filtering>
			</resource>
			<!-- Alle anderen Dateien unver채ndert kopieren. -->
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>app.properties</exclude>
					<exclude>**/*.txt</exclude>
				</excludes>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<inherited>true</inherited>
					<configuration>
						<archive>
							<addMavenDescriptor>false</addMavenDescriptor>
							<manifest>
								<addClasspath>true</addClasspath>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
								<classpathPrefix>lib/</classpathPrefix>
								<mainClass>${timey.main.class}</mainClass>
							</manifest>
							<manifestEntries>
								<JavaFX-Version>${javafx.version}</JavaFX-Version>
							</manifestEntries>
						</archive>
						<outputDirectory>${application.dist}</outputDirectory>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${maven-clean-plugin.version}</version>
				<configuration>
					<excludeDefaultDirectories>true</excludeDefaultDirectories>
					<filesets>
						<fileset>
							<directory>target</directory>
							<includes>
								<include>**/*</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.1.201405082137</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<excludes>
						<exclude>ch/nydi/aop/interceptor/**/*.class</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<!-- Maven-Abh채ngigkeiten in target-Ordner kopieren. Haupts채chlich um
					dem Scene Builder Drittanbieter-Komponenten bekannt zu machen, ohne absolute
					Pfade in FXML-Dateien verwenden zu m체ssen. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven.dependency.plugin.version}</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>install</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
							<outputDirectory>${application.dist}/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.plugin.version}</version>
				<configuration>
					<includes>
						<include>FixedOrderTests.java</include>
					</includes>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
