<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- ###################### Empfänger-Implementierungen ############################# -->
	<bean id="alarmReceiver" name="alarm" class="rmblworx.tools.timey.Alarm">
		<constructor-arg ref="alarmTimestampService" index="0" />
	</bean>
	<bean id="stopwatchReceiver" name="stopwatch" class="rmblworx.tools.timey.Stopwatch">
		<constructor-arg ref="simpleTimer" index="0" />
		<constructor-arg value="1" index="1" />
		<constructor-arg value="1" index="2" />
		<constructor-arg type="java.util.concurrent.TimeUnit"
			value="MILLISECONDS" index="3" />
	</bean>
	<bean id="countdownReceiver" name="countdown" class="rmblworx.tools.timey.Countdown">
		<constructor-arg value="1" index="0" />
		<constructor-arg value="1" index="1" />
		<constructor-arg type="java.util.concurrent.TimeUnit"
			value="MILLISECONDS" index="2" />
	</bean>
	<!-- ###################### Client-Implementierungen ############################# -->
	<bean id="alarmClient" name="alarmClient" class="rmblworx.tools.timey.AlarmClient">
		<constructor-arg ref="alarmReceiver" />
	</bean>
	<bean id="stopwatchClient" name="stopwatchClient"
		class="rmblworx.tools.timey.StopwatchClient">
		<constructor-arg ref="stopwatchReceiver" />
	</bean>
	<bean id="countdownClient" name="countdownClient"
		class="rmblworx.tools.timey.CountdownClient">
		<constructor-arg ref="countdownReceiver" />
	</bean>
	<!-- ###################### sonstige-Implementierungen ############################# -->
	<bean scope="prototype" id="timerRunnable" name="timerRunnable" class="rmblworx.tools.timey.TimerRunnable">
		<constructor-arg ref="descriptor" index="0" />
		<constructor-arg value="0" index="1" />
	</bean>
	<bean scope="prototype" id="countdownRunnable" name="countdownRunnable"
		class="rmblworx.tools.timey.CountdownRunnable">
		<constructor-arg ref="descriptor" index="0" />
		<constructor-arg value="0" index="1" />
	</bean>
	<bean id="simpleTimer" name="simpleTimer" class="rmblworx.tools.timey.SimpleTimer">
		<constructor-arg ref="descriptor"></constructor-arg>
	</bean>
	<bean id="simpleCountdown" name="simpleCountdown"
		class="rmblworx.tools.timey.SimpleCountdown">
		<constructor-arg ref="timeyEventDispatcher" />
	</bean>
	<bean id="jarVersionDetector" name="jarVersionDetector"
		class="rmblworx.tools.timey.JarVersionDetector" scope="singleton">
	</bean>

	<bean id="timeyEventDispatcher" name="timeyEventDispatcher"
		class="rmblworx.tools.timey.event.TimeyEventDispatcher" scope="singleton">
	</bean>
	<!-- ############################# Werteobjekte ################################## -->
	<bean id="descriptor" name="descriptor"
		class="rmblworx.tools.timey.vo.TimeDescriptor">
		<constructor-arg value="0"></constructor-arg>
	</bean>
	<bean id="alarmDescriptor" name="alarmDescriptor"
		class="rmblworx.tools.timey.vo.AlarmDescriptor">
		<constructor-arg ref="descriptor" index="0"/>
		<constructor-arg value="true" index="1"/>
		<constructor-arg value="Text" index="2"/>
		<constructor-arg ref="path" index="3"/>
		<constructor-arg ref="descriptor" index="4"/>
	</bean>
	<bean id="path" name="path"
		class="java.nio.file.Paths" factory-method="get">
		<constructor-arg value="file:/bla/blubb"/>
	</bean>
	

	<!-- ######################### Service-Deklarationen ############################# -->
	<bean id="alarmTimestampService" name="alarmTimestampService"
		class="rmblworx.tools.timey.persistence.service.AlarmTimestampService">
	</bean>
	<!-- ########################## DAO-Deklarationen ######################### -->
	<bean id="alarmTimestampDao" name="alarmTimestampDao"
		class="rmblworx.tools.timey.persistence.dao.AlarmTimestampDao">
	</bean>

	<!-- ############################ Begin Spring-Hibernate Integration ######################## -->
	<context:component-scan base-package="rmblworx.tools.timey.persistence" />
	<tx:annotation-driven />

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:alarmdb" />
		<property name="username" value="sa" />
		<property name="password" value="" />
		<property name="initialSize" value="5" />
		<property name="maxActive" value="10" />
	</bean>
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="rmblworx.tools.timey.persistence.model" />
		<property name="hibernateProperties">
			<props>
				<prop key="dialect">org.hibernate.dialect.H2Dialect</prop>
				<prop key="hibernate.hbm2ddl.auto">create-drop</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
			</props>
		</property>
	</bean>

	<!-- um die Exception-Übersetzung einem HibernateDAO ohne Schablonen hinzuzufügen 
		wird die im folgenden deklarierte Bean dem Spring-Anwendungscontext hinzugefügt. 
		Der Postprocessor hängt einen Advisor an jede Bean die mit @Repository annotiert 
		ist sodass alle plattformspezifischen Exceptions abgefangen und als standardisierte, 
		ungeprüfte Spring-Exceptionserneut ausgelöst werden. -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	<!-- ############################ Ende Spring - Hibernate Integration ######################## -->

	<!-- Konzept - Quelle: https://github.com/nydi/spring-practice -->
	<!-- AOP config -->
	<aop:aspectj-autoproxy />

	<!-- declarative chained interceptor -->
	<bean id="debugInterceptorWithComposite" class="ch.nydi.aop.interceptor.CompositeInterceptor">
		<property name="interceptors">
			<list>
				<bean class="ch.nydi.aop.interceptor.TraceInterceptor" />
				<bean class="ch.nydi.aop.interceptor.TimerInterceptor" />
			</list>
		</property>
	</bean>

	<!-- dynamic chained interceptor -->
	<bean id="debugInterceptor" class="ch.nydi.aop.interceptor.DebugInterceptor" />

	<aop:config proxy-target-class="true">
		<!-- comment one of the advisor configuration -->
		<!-- <aop:advisor advice-ref="debugInterceptor" -->
		<!-- pointcut="execution(public * rmblworx.tools.timey.*.*(..))" order="1" 
			/> -->
		<aop:advisor advice-ref="debugInterceptorWithComposite"
			pointcut="execution(public * rmblworx.tools.timey.*.*(..))" order="1" />
	</aop:config>

</beans>
